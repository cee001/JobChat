package com.jobchat.action;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts2.ServletActionContext;

import com.jobchat.common.Pager;
import com.jobchat.entity.JUser;
import com.jobchat.entity.JUserinfo;
import com.jobchat.service.UserService;
import com.jobchat.service.UserinfoService;
import com.jobchat.util.TimeUtil;
import com.opensymphony.xwork2.ActionSupport;


@SuppressWarnings("serial")
public class UserAction extends ActionSupport {

	private JUser u;
	private JUserinfo ui;
	private UserinfoService userinfoService;	
	private UserService us;

	public JUser getU() {
		return u;
	}
	public void setU(JUser u) {
		this.u = u;
	}
	public UserService getUs() {
		return us;
	}
	public void setUs(UserService us) {
		this.us = us;
	}
	public JUserinfo getUi() {
		return ui;
	}
	public void setUi(JUserinfo ui) {
		this.ui = ui;
	}
	public UserinfoService getUserinfoService() {
		return userinfoService;
	}
	public void setUserinfoService(UserinfoService userinfoService) {
		this.userinfoService = userinfoService;
	}
	//登录
	public String doLogin() throws UnsupportedEncodingException{
		HttpServletRequest request=ServletActionContext.getRequest();
		HttpServletResponse response=ServletActionContext.getResponse();
		 String userPhone=request.getParameter("userPhone");
	     String userPassword=request.getParameter("userPassword");	
		 u=us.checkLogin(userPhone,userPassword);	    
	     if(u!=null){

	         String pti= TimeUtil.dateToStrLong(new Date());
	 		 u.setUserTime(pti);
	 		 us.updateUser(u);
	         int uid=u.getUserId();
	         u.setUserId(uid);
	         //request.setCharacterEncoding("utf-8");
	        // String usernikename=URLEncoder.encode(request.getParameter("usernikename"),"utf-8");
	         String name= URLEncoder.encode(u.getUserNikename(), "utf-8");
             Cookie cookie=new Cookie("mrCookie",uid+"#"+userPhone+"#"+name+"#"+u.getUserImgface());  
             cookie.setMaxAge(60*60*24*30);
             cookie.setPath("/");
             response.addCookie(cookie);   
   
				return "success";		
			}else{		
				return "fail";
			}	


	}
	//退出登录
	public String dologinout(){
		HttpServletRequest request=ServletActionContext.getRequest();
		HttpServletResponse response=ServletActionContext.getResponse();
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
		for (int i = 0; i < cookies.length; i++) {
		Cookie cookie = cookies[i];
		// 销毁
		cookie.setMaxAge(0);
        cookie.setPath("/");
		response.addCookie(cookie);
		}
		return "loginout";
		}else{
		return "loginout";	
		}
		
		}

	//添加
	public String doAdd(){
        String ptime = TimeUtil.dateToStrLong(new Date());
		u.setUserTime(ptime);		
		if(us.addUser(u)){
			return this.showlist();		
		}else{
			
			return "fail";
		}	
	}
	
//	//前端修改个人资料
//	public String showUpdate(){
//		
//		ui=userinfoService.getSUserinfo(u.getUserId());	
//
//		return "showUpdate";		
//	
//	}	
//
//	//显示修改用户信息
//	public String showUpdate1(){
//	
//		ui=userinfoService.getSUserinfo(u.getUserId());	
//
//	    return "showUpdate1";		
//	
//	}
//	//前端个人中心修改密码
//	public String showUpdate2(){
//		
//		u=us.getSUserById(u.getUserId());		
//
//		return "showUpdate2";		
//	
//	}	
//		
//	//修改用户资料
//	public String doUpdate(){
//		String name=ui.getSUser().getUserNikename();
//		u=us.getSUserById(ui.getSUser().getUserId());
//	
//		u.setUserNikename(name);
//		us.updateSUser(u);
//		if(userinfoService.updateSUserinfo(ui)){
//			return this.showlist();		
//		}else{			
//			return this.showlist();		
//		}	
//	}
//
//	
	//后台修改用户状态
	public String doUpdate1(){
   	    HttpServletRequest request=ServletActionContext.getRequest();   	 
        int uid=Integer.parseInt(request.getParameter("usid"));
        int para=Integer.parseInt(request.getParameter("userStatus"));
        u=us.getUserById(uid);
		u.setUserStatus(para);
		if(us.updateUser(u)){
			return this.showlist();		
		}else{
			
			return this.showlist();		
		}	
	}
	
	//用户登录界面修改密码
	public String doUpdate2(){
   	    HttpServletRequest request=ServletActionContext.getRequest();   	 
   	    String phone=request.getParameter("userPhone");
   	    phone=phone.substring(0, 11);
        String userPwd=request.getParameter("userPwd");
        u=us.findUserByPhone(phone);
		u.setUserPassword(userPwd);
		if(us.updateUser(u)){
			return this.showlist();		
		}else{
			
			return this.showlist();		
		}	
	}
	//用户修改头像
	public String doUpdate3(){
   	    HttpServletRequest request=ServletActionContext.getRequest();   	 
   	    int uid=Integer.parseInt(request.getParameter("uid"));
   	    String img=request.getParameter("imgface"); 		   	    
        u=us.getUserById(uid);
        u.setUserImgface(img);
          
		if(us.updateUser(u)){
			return this.showlist();		
		}else{
			
			return this.showlist();		
		}	
	}	
	//用户修改头像
	public String doUpdate4(){
 
		if(us.updateUser(u)){
			return this.showlist();		
		}else{
			
			return this.showlist();		
		}	
	}	
    //删除
	public String doDel(){
   	    HttpServletRequest request=ServletActionContext.getRequest();   	 
        HttpSession session=request.getSession();		
        if(session.getAttribute("login")==null){
        	 return "input";	
        }else{
        	
        }
		if(us.delUser(u)){
			return this.showlist();		
		}else{
			
			return this.showlist();
		}	
	}
	//显示详情
	public String showDetail(){

		ui=userinfoService.getJUserinfo(u.getUserId());
		
		return "showDetail";		
	
	}
	
	//显示详情
	public String showDetail1(){
   	    HttpServletRequest request=ServletActionContext.getRequest();   	 
        int uid=Integer.parseInt(request.getParameter("uid"));	
        ui=userinfoService.getJUserinfo(uid);	
		return "showDetail1";		

}
	
	//分页获取
	public String showlist(){		
   	    HttpServletRequest request=ServletActionContext.getRequest();   		

	   int pageNum=1;
	   int pageSize=15;
	   
	   if(request.getParameter("p") != null &&! request.getParameter("p").equals("")){
	       try{
	           pageNum=Integer.parseInt(request.getParameter("p"));
	           
	       }catch(Exception ex){

	       }
	   }

	   ArrayList<JUser> al=us.getSUserByPageNum(pageNum, pageSize);
	   request.setAttribute("al", al);
	   
	   int count= us.getcount();
	   String pager=Pager.getPaging(pageNum, pageSize, count, "ur!showlist");
	   request.setAttribute("pager", pager);
	   return "showlist";
	}
	
	//分页获取
	public String showlist1(){
		//����ҳ��
   	    HttpServletRequest request=ServletActionContext.getRequest();   	 
       int pageNum=1;
	   int pageSize=15;
	   
	   if(request.getParameter("p") != null &&! request.getParameter("p").equals("")){
	       try{
	           pageNum=Integer.parseInt(request.getParameter("p"));
	           
	       }catch(Exception ex){

	       }
	   }
	   
	   ArrayList<JUser> al=us.getSUserByPageNum(pageNum, pageSize);
	   request.setAttribute("al", al);
	  
	   int count= us.getcount();
	   String pager=Pager.getPaging(pageNum, pageSize, count, "ur!showlist1");
	   request.setAttribute("pager", pager);
	   return "showlist1";
	}
	

}
