package com.jobchat.action;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.opensymphony.xwork2.ActionSupport;
import com.jobchat.entity.JCompany;
import com.jobchat.entity.JCompanyculture;
import com.jobchat.entity.JCompanyenvironment;
import com.jobchat.entity.JCompanylicense;
import com.jobchat.entity.JCompanyuser;
import com.jobchat.entity.JCompanywelfare;
import com.jobchat.entity.JCompnaybusiness;
import com.jobchat.entity.JUser;
import com.jobchat.entity.JUsereducation;
import com.jobchat.entity.JUserevaluation;
import com.jobchat.entity.JUserforjob;
import com.jobchat.entity.JUserhobby;
import com.jobchat.entity.JUserinfo;
import com.jobchat.entity.JUserpaper;
import com.jobchat.entity.JUserskill;
import com.jobchat.entity.JUservalues;
import com.jobchat.entity.JUserwork;
import com.jobchat.service.CompanyService;
import com.jobchat.service.CompanycultureService;
import com.jobchat.service.CompanyenvironmentService;
import com.jobchat.service.CompanyjobService;
import com.jobchat.service.CompanyjobtypeService;
import com.jobchat.service.CompanylicenseService;
import com.jobchat.service.CompanylicensetypeService;
import com.jobchat.service.CompanyuserService;
import com.jobchat.service.CompanywelfareService;
import com.jobchat.service.CompanywelfaretypeService;
import com.jobchat.service.CompnaybusinessService;
import com.jobchat.service.FriendsService;
import com.jobchat.service.UserService;
import com.jobchat.service.UsercompanyjobService;
import com.jobchat.service.UsereducationService;
import com.jobchat.service.UserevaluationService;
import com.jobchat.service.UserforjobService;
import com.jobchat.service.UserhobbyService;
import com.jobchat.service.UserinfoService;
import com.jobchat.service.UserpaperService;
import com.jobchat.service.UserpayService;
import com.jobchat.service.UserskillService;
import com.jobchat.service.UserskilltypeService;
import com.jobchat.service.UservaluesService;
import com.jobchat.service.UserworkService;
import com.jobchat.util.Md5;
import com.jobchat.util.ResultUtils;
import com.jobchat.util.TextUtility;


@SuppressWarnings("serial")
public class MobileAction extends ActionSupport{
	private UserService  userService;
	private UserinfoService  userinfoService;	
	private UsercompanyjobService  usercompanyjobService;
	private UsereducationService  usereducationService;
	private UserevaluationService  userevaluationService;
	private UserforjobService  userforjobService;
	private UserhobbyService  userhobbyService;	
	private UserpaperService  userpaperService;
	private UserpayService userpayService;
	private UserskillService  userskillService;
	private UserskilltypeService  userskilltypeService;
	private UservaluesService  uservaluesService;
	private UserworkService  userworkService;
	private CompanycultureService  companycultureService;
	private CompanyenvironmentService  companyenvironmentService;
	private CompanyjobService  companyjobService;
	private CompanyjobtypeService  companyjobtypeService;
	private CompanylicenseService  companylicenseService;	
	private CompanylicensetypeService  companylicensetypeService;
	private CompanyuserService  companyuserService;
	private CompanywelfareService  companywelfareService;
	private CompanywelfaretypeService  companywelfaretypeService;
	private CompnaybusinessService  compnaybusinessService;
	private FriendsService friendsService;
	private CompanyService  companyService;	
	//闁谎冾煼濡撅拷
	public String mobile() throws UnsupportedEncodingException, JSONException{
		HttpServletRequest request=ServletActionContext.getRequest();
		request.setCharacterEncoding("UTF-8");
		String para=request.getParameter("para");
		JSONObject jb = new JSONObject(para);
		int type =  jb.getInt("sendtype");
		JSONObject data = jb.getJSONObject("data");
		switch (type) {
		case 10001:
			//http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10001,"data":{"phone":"18858705209","password":"0000000"}}
			loginUser(data);
			break;
		case 10002:
			updateUser(data);
			break;
		case 10003:
			//http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10003,"data":{"userPhone":"18858294600","userPassword":"123456","userNikename":"sss"}}
			addUser(data);
			break;
		case 10005:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10005,"data":{"phone":"18858294600"}}
			checkPhone(data);
			break;	
		case 10006:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10006,"data":{"id":"1"}}
			getUser(data);
			break;	
		case 10007:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10007,"data":{"uid":"1"}}
			getUserinfo(data);
			break;	
		case 10008:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10008,"data":{"uinfoid":"1"}}
			getUsereducations(data);
			break;					
		case 10009:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10009,"data":{"uinfoid":"1"}}
			getUserskills(data);
			break;	
		case 10010:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10010,"data":{"uinfoid":"1"}}
			getUserworks(data);
			break;				
		case 10011:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10011,"data":{"uinfoid":"1"}}
			getUserpapers(data);
			break;			
		case 10012:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10012,"data":{"uinfoid":"1"}}
			getUserevaluations(data);
			break;			
		case 10013:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10013,"data":{"uinfoid":"1"}}
			getUserevaluations(data);
			break;			
		case 10014:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10014,"data":{"uinfoid":"1"}}
			getUserhobbys(data);
			break;			
		case 10015:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10015,"data":{"uinfoid":"1"}}
			getUservalues(data);
			break;		
		case 10016:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10016,"data":{"uinfoid":"1"}}
			getUserforjobs(data);
			break;	
		case 10017:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10017,"data":{"forjobid":"1"}}
			getUserforjobById(data);
			break;			
		case 10018:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10018,"data":{"userid":"1"}}
			getCompany(data);
			break;				
		case 10019:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10019,"data":{"companyid":"1"}}
			getCompanyuser(data);
			break;	
		case 10020:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10020,"data":{"companyid":"1"}}
			getCompanylicenses(data);
			break;			

		case 10021:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10021,"data":{"companyid":"1"}}
			getCompanyenvironment(data);
			break;			
		case 10022:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10022,"data":{"companyid":"1"}}
			getCompanywelfare(data);
			break;			
		case 10023:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10023,"data":{"companyid":"1"}}
			getCompanyculture(data);
			break;					
		case 10024:
			// http://127.0.0.1:8080/JobChat/mobile!mobile.action?para={"sendtype":10024,"data":{"companyid":"1"}}
			getCompanybusiness(data);
			break;		
		
		
		
		}
		
				
		return null;
	}
	private void loginUser(JSONObject data) throws JSONException {
		String loginId = data.getString("phone");
		String loginPwd = data.getString("password");
		int status = 1;
		JUser u = userService.checkLogin(loginId, loginPwd);
		Map<String, Object> map = new HashMap<String, Object>();	
		if(u!=null){
			String ptime = TextUtility.formatDate(new Date());	
			u.setUserRefreshtime(ptime);
			userService.updateUser(u);			
			Map<String, Object> map2 = new HashMap<String, Object>();
			map2.put("user", u);
			map.put("data", map2);			
		    status = 0;
		}else{
			status = 1;
			map.put("data", "");			
			
		}	
		map.put("ret", status);
		map.put("msg", "");
		try {
			ResultUtils.toJson(ServletActionContext.getResponse(), map);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void getUser(JSONObject data) throws JSONException {
		int id = data.getInt("id");
		int status = 1;		
		JUser u = userService.getUserById(id);
		Map<String, Object> map = new HashMap<String, Object>();		
		if(u!=null){	
			Map<String, Object> map2 = new HashMap<String, Object>();
			map2.put("user", u);
			map.put("data", map2);			
		    status = 0;
		}else{
			status = 1;
			map.put("data", "");			
			
		}
		
		map.put("ret", status);
		map.put("msg", "");
		try {
			ResultUtils.toJson(ServletActionContext.getResponse(), map);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	  }
	
	
     private void getUserinfo(JSONObject data) throws JSONException {
         int uid=data.getInt("uid");
			JUserinfo uinfo = userinfoService.getJUserinfo(uid);
			Map<String, Object> map= new HashMap<String, Object>();
	        int status = 1;
			if(uinfo != null){
				Map<String, Object> map2= new HashMap<String, Object>();
				map.put("userinfo", uinfo);					
				map.put("data", map2);
				status = 0;
			}else {
				status = 1;
				map.put("data", "");
			}

			map.put("ret", status);
			map.put("msg", "");
			try {
				ResultUtils.toJson(ServletActionContext.getResponse(), map);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    }

	private void updateUser(JSONObject data) {
		GsonBuilder builder = new GsonBuilder();
		// 婵炴垶鎼幏鐑藉级閻戝洦瀚归柨鐔告灮閹风兘濮�敍鍕挄闁跨喐鏋婚幏鐑芥晸閿熺捶Expose
		// 濠电偛顦归崝蹇氼暰闁跨喐鏋婚幏鐑芥晸閻ｅ矉鎷烽柨鐔绘閳绘捇鏁撻敓锟�//
		// builder.excludeFieldsWithoutExposeAnnotation();
		Gson gson = builder.create();
		String s = data.toString();
		JUser u = gson.fromJson(s, new TypeToken<JUser>() {
		}.getType());
		JUser u2 = null;
		boolean b =  false;
		if(u.getUserPassword() != null){
			u2 = userService.findUserByPhone(u.getUserPhone());
			Md5 md5 = new Md5(u.getUserPassword());
	        md5.processString();
	        String strEncrypto = md5.getStringDigest();	
	        u2.setUserPassword(strEncrypto);
			b = userService.updateUser(u2);
		}else{
			u2 = userService.getUserById(u.getUserId());
			u.setUserPassword(u2.getUserPassword());
			b = userService.updateUser(u);
		}
		Map<String, Object> map = new HashMap<String, Object>();
		int status = 1;
		if (b) {
			status = 0;
		} else {
			status = 1;
		}
		map.put("ret", status);
		map.put("msg", "");
		Map<String, Object> map2 = new HashMap<String, Object>();
		map.put("data", map2);
		try {
			ResultUtils.toJson(ServletActionContext.getResponse(), map);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
		
	private void addUser(JSONObject data) {
		GsonBuilder builder = new GsonBuilder();
		Gson gson = builder.create();
		String s = data.toString();
		JUser u = gson.fromJson(s, new TypeToken<JUser>() {
		}.getType());

		String ptime = TextUtility.formatDate(new Date());
        Md5 md5 = new Md5(u.getUserPassword());
        md5.processString();
        String strEncrypto = md5.getStringDigest();	
        u.setUserPassword(strEncrypto);
		u.setUserTime(ptime);
		u.setUserStatus(0);
		int outid=(int) (Math.random() * 100000000);
		JUser m = userService.findUserByOutid(outid);
		if(m!=null){
			u.setUserOutid(outid);
		}else{
			
			outid=(int) (Math.random() * 1000000000);
			JUser n = userService.findUserByOutid(outid);
			if(n!=null){
				u.setUserOutid(outid);
			}else{
				u.setUserOutid(0);
			}
		}
		
		if(u.getUserNikename() == null){
			u.setUserNikename(u.getUserPhone());
		}
		u.setUserType((short)0);
		boolean b = userService.addUser(u);
		JUserinfo uinfo = new JUserinfo();
		uinfo.setJUser(u);
		b = userinfoService.addUserinfo(uinfo);
		Map<String, Object> map = new HashMap<String, Object>();
		int status = 1;
		if (b) {
			status = 0;
			map.put("msg", "");
			Map<String, Object> map2 = new HashMap<String, Object>();
			map.put("data", map2);
		} else {
			status = 1;
			map.put("msg", "");
		}
		map.put("ret", status);
		try {
			ResultUtils.toJson(ServletActionContext.getResponse(), map);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

    private void checkPhone(JSONObject data) throws JSONException {

		try {

			int status = 0;
			String loginId = data.getString("phone");
			JUser u = userService.findUserByPhone(loginId);
			if (u == null) {
				status = 1;
			} else {
				status = 0;
			}
			
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("data", "");
			map.put("ret", status);
			map.put("msg", "");
			ResultUtils.toJson(ServletActionContext.getResponse(), map);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
		
    private void getUsereducations(JSONObject data) throws JSONException {
        int uinfoid=data.getInt("uinfoid");
			ArrayList<JUsereducation> list = usereducationService.getAllUinfo(uinfoid);
			Map<String, Object> map= new HashMap<String, Object>();
	        int status = 1;
			if(list  != null){
				Map<String, Object> map2= new HashMap<String, Object>();
				map.put("list ", list);					
				map.put("data", map2);
				status = 0;
			}else {
				status = 1;
				map.put("data", "");
			}

			map.put("ret", status);
			map.put("msg", "");
			try {
				ResultUtils.toJson(ServletActionContext.getResponse(), map);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	  }
	  private void getUserevaluations(JSONObject data) throws JSONException {
         int uinfoid=data.getInt("uinfoid");
			ArrayList<JUserevaluation> list = userevaluationService.getAllUinfo(uinfoid);
			Map<String, Object> map= new HashMap<String, Object>();
	        int status = 1;
			if(list  != null){
				Map<String, Object> map2= new HashMap<String, Object>();
				map.put("list ", list);					
				map.put("data", map2);
				status = 0;
			}else {
				status = 1;
				map.put("data", "");
			}

			map.put("ret", status);
			map.put("msg", "");
			try {
				ResultUtils.toJson(ServletActionContext.getResponse(), map);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	 }		
			  
	  private void getUserskills(JSONObject data) throws JSONException {
        int uinfoid=data.getInt("uinfoid");
			ArrayList<JUserskill> list = userskillService.getAllUinfo(uinfoid);
			Map<String, Object> map= new HashMap<String, Object>();
	        int status = 1;
			if(list  != null){
				Map<String, Object> map2= new HashMap<String, Object>();
				map.put("list ", list);					
				map.put("data", map2);
				status = 0;
			}else {
				status = 1;
				map.put("data", "");
			}

			map.put("ret", status);
			map.put("msg", "");
			try {
				ResultUtils.toJson(ServletActionContext.getResponse(), map);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	 }			  
	  private void getUserworks(JSONObject data) throws JSONException {
	       int uinfoid=data.getInt("uinfoid");
				ArrayList<JUserwork> list = userworkService.getAllUinfo(uinfoid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(list  != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("list ", list);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
      }				  
	  private void getUserpapers(JSONObject data) throws JSONException {
	       int uinfoid=data.getInt("uinfoid");
				ArrayList<JUserpaper> list = userpaperService.getAllUinfo(uinfoid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(list  != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("list ", list);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}	
	  private void getUserhobbys(JSONObject data) throws JSONException {
	       int uinfoid=data.getInt("uinfoid");
				ArrayList<JUserhobby> list = userhobbyService.getAllUinfo(uinfoid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(list  != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("list ", list);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}	  
	     private void getUservalues(JSONObject data) throws JSONException {
	    	 int uinfoid=data.getInt("uinfoid");
				JUservalues entity = uservaluesService.getJUservaluesByUinfoid(uinfoid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }		
	     private void getUserforjobs(JSONObject data) throws JSONException {
	    	 int uinfoid=data.getInt("uinfoid");
				ArrayList<JUserforjob> list = userforjobService.getAllUinfo(uinfoid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(list != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", list);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }	
	     private void getUserforjobById(JSONObject data) throws JSONException {
	    	    int jid=data.getInt("forjobid");
				JUserforjob entity= userforjobService.getTForjobById(jid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }	     
	     private void getCompany(JSONObject data) throws JSONException {
	    	    int uid=data.getInt("userid");
				JCompany entity= companyService.getCompanyByuid(uid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }		     
	     private void getCompanyuser(JSONObject data) throws JSONException {
	    	    int cid=data.getInt("companyid");
				JCompanyuser entity= companyuserService.getCompanyuserBycid(cid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }	
	     
	    private void getCompanylicenses(JSONObject data) throws JSONException {
	    	    int cid=data.getInt("companyid");
				ArrayList<JCompanylicense> list= companylicenseService.getAllCinfo(cid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(list != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("list", list);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }	
	     
	    private void getCompanyenvironment(JSONObject data) throws JSONException {
	    	 int cid=data.getInt("companyid");
				JCompanyenvironment entity= companyenvironmentService.getCompnayenvironmentBycid(cid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }		
	    private void getCompanywelfare(JSONObject data) throws JSONException {
    	    int cid=data.getInt("companyid");
			ArrayList<JCompanywelfare> list= companywelfareService.getAllCinfo(cid);
			Map<String, Object> map= new HashMap<String, Object>();
	        int status = 1;
			if(list != null){
				Map<String, Object> map2= new HashMap<String, Object>();
				map.put("list", list);					
				map.put("data", map2);
				status = 0;
			}else {
				status = 1;
				map.put("data", "");
			}

			map.put("ret", status);
			map.put("msg", "");
			try {
				ResultUtils.toJson(ServletActionContext.getResponse(), map);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }	  
	    
	    private void getCompanyculture(JSONObject data) throws JSONException {
	    	 int cid=data.getInt("companyid");
				JCompanyculture entity= companycultureService.getCompanycultureBycid(cid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }	  
	    
	    private void getCompanybusiness(JSONObject data) throws JSONException {
	    	 int cid=data.getInt("companyid");
				JCompnaybusiness entity= compnaybusinessService.getCompnaybusinessBycid(cid);
				Map<String, Object> map= new HashMap<String, Object>();
		        int status = 1;
				if(entity != null){
					Map<String, Object> map2= new HashMap<String, Object>();
					map.put("entity", entity);					
					map.put("data", map2);
					status = 0;
				}else {
					status = 1;
					map.put("data", "");
				}

				map.put("ret", status);
				map.put("msg", "");
				try {
					ResultUtils.toJson(ServletActionContext.getResponse(), map);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    }	 	    
	    
	    
	    
	    
	    
		public UserService getUserService() {
			return userService;
		}
		public void setUserService(UserService userService) {
			this.userService = userService;
		}
		public UserinfoService getUserinfoService() {
			return userinfoService;
		}
		public void setUserinfoService(UserinfoService userinfoService) {
			this.userinfoService = userinfoService;
		}
		public UsercompanyjobService getUsercompanyjobService() {
			return usercompanyjobService;
		}
		public void setUsercompanyjobService(UsercompanyjobService usercompanyjobService) {
			this.usercompanyjobService = usercompanyjobService;
		}
		public UsereducationService getUsereducationService() {
			return usereducationService;
		}
		public void setUsereducationService(UsereducationService usereducationService) {
			this.usereducationService = usereducationService;
		}
		public UserevaluationService getUserevaluationService() {
			return userevaluationService;
		}
		public void setUserevaluationService(UserevaluationService userevaluationService) {
			this.userevaluationService = userevaluationService;
		}
		public UserforjobService getUserforjobService() {
			return userforjobService;
		}
		public void setUserforjobService(UserforjobService userforjobService) {
			this.userforjobService = userforjobService;
		}
		public UserhobbyService getUserhobbyService() {
			return userhobbyService;
		}
		public void setUserhobbyService(UserhobbyService userhobbyService) {
			this.userhobbyService = userhobbyService;
		}
		public UserpaperService getUserpaperService() {
			return userpaperService;
		}
		public void setUserpaperService(UserpaperService userpaperService) {
			this.userpaperService = userpaperService;
		}
		public UserpayService getUserpayService() {
			return userpayService;
		}
		public void setUserpayService(UserpayService userpayService) {
			this.userpayService = userpayService;
		}
		public UserskillService getUserskillService() {
			return userskillService;
		}
		public void setUserskillService(UserskillService userskillService) {
			this.userskillService = userskillService;
		}
		public UserskilltypeService getUserskilltypeService() {
			return userskilltypeService;
		}
		public void setUserskilltypeService(UserskilltypeService userskilltypeService) {
			this.userskilltypeService = userskilltypeService;
		}
		public UservaluesService getUservaluesService() {
			return uservaluesService;
		}
		public void setUservaluesService(UservaluesService uservaluesService) {
			this.uservaluesService = uservaluesService;
		}
		public UserworkService getUserworkService() {
			return userworkService;
		}
		public void setUserworkService(UserworkService userworkService) {
			this.userworkService = userworkService;
		}
		public CompanycultureService getCompanycultureService() {
			return companycultureService;
		}
		public void setCompanycultureService(CompanycultureService companycultureService) {
			this.companycultureService = companycultureService;
		}
		public CompanyenvironmentService getCompanyenvironmentService() {
			return companyenvironmentService;
		}
		public void setCompanyenvironmentService(
				CompanyenvironmentService companyenvironmentService) {
			this.companyenvironmentService = companyenvironmentService;
		}
		public CompanyjobService getCompanyjobService() {
			return companyjobService;
		}
		public void setCompanyjobService(CompanyjobService companyjobService) {
			this.companyjobService = companyjobService;
		}
		public CompanyjobtypeService getCompanyjobtypeService() {
			return companyjobtypeService;
		}
		public void setCompanyjobtypeService(CompanyjobtypeService companyjobtypeService) {
			this.companyjobtypeService = companyjobtypeService;
		}
		public CompanylicenseService getCompanylicenseService() {
			return companylicenseService;
		}
		public void setCompanylicenseService(CompanylicenseService companylicenseService) {
			this.companylicenseService = companylicenseService;
		}
		public CompanylicensetypeService getCompanylicensetypeService() {
			return companylicensetypeService;
		}
		public void setCompanylicensetypeService(
				CompanylicensetypeService companylicensetypeService) {
			this.companylicensetypeService = companylicensetypeService;
		}
		public CompanyuserService getCompanyuserService() {
			return companyuserService;
		}
		public void setCompanyuserService(CompanyuserService companyuserService) {
			this.companyuserService = companyuserService;
		}
		public CompanywelfareService getCompanywelfareService() {
			return companywelfareService;
		}
		public void setCompanywelfareService(CompanywelfareService companywelfareService) {
			this.companywelfareService = companywelfareService;
		}
		public CompanywelfaretypeService getCompanywelfaretypeService() {
			return companywelfaretypeService;
		}
		public void setCompanywelfaretypeService(
				CompanywelfaretypeService companywelfaretypeService) {
			this.companywelfaretypeService = companywelfaretypeService;
		}
		public CompnaybusinessService getCompnaybusinessService() {
			return compnaybusinessService;
		}
		public void setCompnaybusinessService(
				CompnaybusinessService compnaybusinessService) {
			this.compnaybusinessService = compnaybusinessService;
		}
		public FriendsService getFriendsService() {
			return friendsService;
		}
		public void setFriendsService(FriendsService friendsService) {
			this.friendsService = friendsService;
		}
		public CompanyService getCompanyService() {
			return companyService;
		}
		public void setCompanyService(CompanyService companyService) {
			this.companyService = companyService;
		}	
	
}
